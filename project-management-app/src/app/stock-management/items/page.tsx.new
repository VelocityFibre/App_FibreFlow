"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { createClient } from "@supabase/supabase-js";
import { useRouter } from "next/navigation";

// Define interfaces
interface StockItem {
  id: string;
  name: string;
  category: string;
  uom: string;
  itemCode: string;
  currentStock: number;
  minStock: number;
  supplierName: string;
  lastUpdated: string;
}

interface Category {
  id: string;
  name: string;
}

// Initialize Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || "";
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || "";
const supabase = createClient(supabaseUrl, supabaseKey);

export default function StockItemsPage() {
  const router = useRouter();
  
  // State for stock items
  const [stockItems, setStockItems] = useState<StockItem[]>([]);
  const [filteredItems, setFilteredItems] = useState<StockItem[]>([]);
  const [selectedItems, setSelectedItems] = useState<string[]>([]);
  
  // State for UI
  const [loading, setLoading] = useState(true);
  const [bulkActionLoading, setBulkActionLoading] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  
  // State for filtering and sorting
  const [searchQuery, setSearchQuery] = useState("");
  const [categoryFilter, setCategoryFilter] = useState("All");
  const [sortField, setSortField] = useState("name");
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("asc");
  
  // Fetch data on component mount
  useEffect(() => {
    fetchData();
  }, []);
  
  // Apply filters and sorting when relevant state changes
  useEffect(() => {
    applyFiltersAndSort();
  }, [stockItems, searchQuery, categoryFilter, sortField, sortDirection]);
  
  // Fetch stock items from the database
  async function fetchData() {
    setLoading(true);
    setErrorMessage(null);
    
    try {
      // Fetch real data from Master_Material_List
      const { data, error } = await supabase
        .from("Master_Material_List")
        .select("*");
      
      if (error) {
        throw new Error(error.message);
      }
      
      if (data) {
        // Map the data to match our StockItem interface
        const mappedItems: StockItem[] = data.map((item: any) => ({
          id: item.id || String(Math.random()),
          name: item.description || "Unknown Item",
          category: item.category || "Uncategorized",
          uom: item.unit_of_measure || "EA",
          itemCode: item.item_code || "",
          currentStock: item.quantity || 0,
          minStock: item.min_stock || 0,
          supplierName: item.supplier || "Unknown Supplier",
          lastUpdated: item.updated_at || new Date().toISOString(),
        }));
        
        setStockItems(mappedItems);
      } else {
        setStockItems([]);
      }
    } catch (err: any) {
      console.error("Error fetching stock items:", err);
      setErrorMessage(`Failed to load stock items: ${err.message}`);
      
      // Fallback to mock data for development if real data fails
      const mockStockItems: StockItem[] = [
        {
          id: "1",
          name: "Fiber Optic Cable - Single Mode",
          category: "Cables",
          uom: "m",
          itemCode: "FOC-SM-001",
          currentStock: 500,
          minStock: 100,
          supplierName: "Fiber Solutions Inc.",
          lastUpdated: new Date().toISOString(),
        },
        {
          id: "2",
          name: "Fiber Optic Cable - Multi Mode",
          category: "Cables",
          uom: "m",
          itemCode: "FOC-MM-002",
          currentStock: 350,
          minStock: 100,
          supplierName: "Fiber Solutions Inc.",
          lastUpdated: new Date().toISOString(),
        },
        {
          id: "3",
          name: "Fiber Splice Closure",
          category: "Accessories",
          uom: "pcs",
          itemCode: "FSC-001",
          currentStock: 50,
          minStock: 20,
          supplierName: "Network Gear Ltd.",
          lastUpdated: new Date().toISOString(),
        },
        {
          id: "4",
          name: "Fiber Distribution Panel",
          category: "Equipment",
          uom: "pcs",
          itemCode: "FDP-001",
          currentStock: 15,
          minStock: 5,
          supplierName: "Network Gear Ltd.",
          lastUpdated: new Date().toISOString(),
        },
        {
          id: "5",
          name: "Fiber Patch Cord - LC/SC",
          category: "Accessories",
          uom: "pcs",
          itemCode: "FPC-LCSC-001",
          currentStock: 100,
          minStock: 30,
          supplierName: "Fiber Solutions Inc.",
          lastUpdated: new Date().toISOString(),
        },
      ];
      
      setStockItems(mockStockItems);
    } finally {
      setLoading(false);
    }
  }
  
  // Apply filters and sorting to stock items
  function applyFiltersAndSort() {
    let filtered = [...stockItems];
    
    // Apply search filter
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(
        item =>
          item.name.toLowerCase().includes(query) ||
          item.itemCode.toLowerCase().includes(query) ||
          item.supplierName.toLowerCase().includes(query)
      );
    }
    
    // Apply category filter
    if (categoryFilter && categoryFilter !== "All") {
      filtered = filtered.filter(item => item.category === categoryFilter);
    }
    
    // Apply sorting
    filtered.sort((a, b) => {
      const aValue = a[sortField as keyof StockItem];
      const bValue = b[sortField as keyof StockItem];
      
      if (typeof aValue === "string" && typeof bValue === "string") {
        return sortDirection === "asc"
          ? aValue.localeCompare(bValue)
          : bValue.localeCompare(aValue);
      } else if (typeof aValue === "number" && typeof bValue === "number") {
        return sortDirection === "asc" ? aValue - bValue : bValue - aValue;
      }
      
      return 0;
    });
    
    setFilteredItems(filtered);
  }
  
  // Handle selecting/deselecting all items
  const handleSelectAll = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.checked) {
      setSelectedItems(filteredItems.map(item => item.id));
    } else {
      setSelectedItems([]);
    }
  };
  
  // Handle selecting/deselecting a single item
  const handleSelectItem = (id: string) => {
    if (selectedItems.includes(id)) {
      setSelectedItems(selectedItems.filter(itemId => itemId !== id));
    } else {
      setSelectedItems([...selectedItems, id]);
    }
  };
  
  // Handle bulk delete of selected items
  const handleBulkDelete = async () => {
    if (selectedItems.length === 0) return;
    
    setBulkActionLoading(true);
    setErrorMessage(null);
    
    try {
      // For now, we'll just update the local state since the database tables don't exist yet
      const remainingItems = stockItems.filter(item => !selectedItems.includes(item.id));
      setStockItems(remainingItems);
      setSelectedItems([]);
      setShowDeleteConfirm(false);
      setSuccessMessage(`Successfully deleted ${selectedItems.length} item(s)`);
      
      // Clear success message after 3 seconds
      setTimeout(() => setSuccessMessage(null), 3000);
      
      // The following code is commented out until the database tables are created
      /*
      const { error } = await supabase
        .from("stock_items")
        .delete()
        .in("id", selectedItems);
      
      if (error) {
        throw new Error(error.message);
      }
      */
    } catch (err: any) {
      console.error("Error deleting items:", err);
      setErrorMessage(`Failed to delete items: ${err.message}`);
    } finally {
      setBulkActionLoading(false);
    }
  };
  
  // Handle sorting when a column header is clicked
  const handleSort = (field: string) => {
    if (field === sortField) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc");
    } else {
      setSortField(field);
      setSortDirection("asc");
    }
  };
  
  // Get the appropriate sort icon based on the current sort state
  const getSortIcon = (field: string) => {
    if (field !== sortField) {
      return "↕️";
    }
    return sortDirection === "asc" ? "↑" : "↓";
  };
  
  // Get unique categories from stock items
  const uniqueCategories = Array.from(new Set(stockItems.map(item => item.category)));
  
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Stock Items</h1>
        <div className="flex space-x-2">
          {selectedItems.length > 0 && (
            <button
              onClick={() => setShowDeleteConfirm(true)}
              className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
              disabled={bulkActionLoading}
            >
              {bulkActionLoading ? "Processing..." : `Delete Selected (${selectedItems.length})`}
            </button>
          )}
          <Link
            href="/stock-management/items/add"
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
          >
            Add New Item
          </Link>
          <Link
            href="/stock-management/items/bulk-import"
            className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
          >
            Bulk Import
          </Link>
        </div>
      </div>
      
      {/* Success and error messages */}
      {successMessage && (
        <div className="mb-4 p-4 bg-green-100 text-green-800 rounded-md">
          {successMessage}
        </div>
      )}
      
      {errorMessage && (
        <div className="mb-4 p-4 bg-red-100 text-red-800 rounded-md">
          {errorMessage}
        </div>
      )}
      
      {/* Filters and search */}
      <div className="mb-6 grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <label htmlFor="search" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Search
          </label>
          <input
            type="text"
            id="search"
            placeholder="Search by name, code, or supplier..."
            className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
        
        <div>
          <label htmlFor="category" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Category
          </label>
          <select
            id="category"
            className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md"
            value={categoryFilter}
            onChange={(e) => setCategoryFilter(e.target.value)}
          >
            <option value="All">All Categories</option>
            {uniqueCategories.map((category) => (
              <option key={category} value={category}>
                {category}
              </option>
            ))}
          </select>
        </div>
      </div>
      
      {/* Delete confirmation modal */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg max-w-md w-full">
            <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4">Confirm Delete</h3>
            <p className="text-gray-600 dark:text-gray-400 mb-6">
              Are you sure you want to delete {selectedItems.length} selected item(s)? This action cannot be undone.
            </p>
            <div className="flex justify-end space-x-3">
              <button
                onClick={() => setShowDeleteConfirm(false)}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition-colors"
                disabled={bulkActionLoading}
              >
                Cancel
              </button>
              <button
                onClick={handleBulkDelete}
                className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
                disabled={bulkActionLoading}
              >
                {bulkActionLoading ? "Processing..." : "Delete"}
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Stock items table */}
      <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden">
        {loading ? (
          <div className="p-6 text-center">
            <p className="text-gray-600 dark:text-gray-400">Loading stock items...</p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
              <thead className="bg-gray-50 dark:bg-gray-700">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    <input
                      type="checkbox"
                      className="h-4 w-4 text-blue-600 dark:text-blue-500 focus:ring-blue-500 dark:focus:ring-blue-400 border-gray-300 dark:border-gray-600 rounded"
                      checked={selectedItems.length === filteredItems.length && filteredItems.length > 0}
                      onChange={handleSelectAll}
                    />
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer"
                    onClick={() => handleSort("name")}
                  >
                    Name {getSortIcon("name")}
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer"
                    onClick={() => handleSort("itemCode")}
                  >
                    Item Code {getSortIcon("itemCode")}
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer"
                    onClick={() => handleSort("category")}
                  >
                    Category {getSortIcon("category")}
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer"
                    onClick={() => handleSort("currentStock")}
                  >
                    Stock {getSortIcon("currentStock")}
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer"
                    onClick={() => handleSort("supplierName")}
                  >
                    Supplier {getSortIcon("supplierName")}
                  </th>
                  <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                {filteredItems.length > 0 ? (
                  filteredItems.map((item) => (
                    <tr key={item.id} className="hover:bg-gray-50 dark:hover:bg-gray-700">
                      <td className="px-6 py-4 whitespace-nowrap text-sm">
                        <input
                          type="checkbox"
                          className="h-4 w-4 text-blue-600 dark:text-blue-500 focus:ring-blue-500 dark:focus:ring-blue-400 border-gray-300 dark:border-gray-600 rounded"
                          checked={selectedItems.includes(item.id)}
                          onChange={() => handleSelectItem(item.id)}
                        />
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
                        {item.name}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                        {item.itemCode}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                        {item.category}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                        <div className="flex items-center">
                          <span className={`mr-2 ${
                            item.currentStock <= item.minStock 
                              ? "text-red-600 dark:text-red-400 font-medium" 
                              : ""
                          }`}>
                            {item.currentStock} {item.uom}
                          </span>
                          {item.currentStock <= item.minStock && (
                            <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200">
                              Low Stock
                            </span>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                        {item.supplierName}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <Link
                          href={`/stock-management/items/${item.id}`}
                          className="text-blue-600 dark:text-blue-400 hover:text-blue-900 dark:hover:text-blue-300 mr-4"
                        >
                          View
                        </Link>
                        <Link
                          href={`/stock-management/items/${item.id}/edit`}
                          className="text-amber-600 dark:text-amber-400 hover:text-amber-900 dark:hover:text-amber-300"
                        >
                          Edit
                        </Link>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan={7} className="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
                      No stock items found matching your filters.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}
